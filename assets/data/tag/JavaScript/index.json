{"hash":"2b0713881518a083297269ac707be987ac2ab4f7","data":{"tag":{"title":"JavaScript","belongsTo":{"edges":[{"node":{"title":"NPM Adalah","path":"/npm-adalah/","date":"20. February 2021","timeToRead":3,"description":"NPM (Node Package Manager) adalah pengelola paket default untuk runtime JavaScript Node.js. NPM terdiri dari dua bagian utama: di sisi kita sebagai klien menggunakan command line interface (CLI) untuk menginstall dan menerbitkan paket, dan repositori online atau disebut npm registry yang menghosting paket-paket kode open source Javascript seperti Node.JS, aplikasi web front-end, aplikasi mobile, robot, router, dan kebutuhan lain yang tak terhitung jumlahnya dari komunitas JavaScript. Banyak paket kode yang diterbitkan di NPM dengan berbagai macam fungsinya bisa mempercepat proses pengembangan web kita.","content":"<p>NPM (<em>Node Package Manager</em>) adalah pengelola paket default untuk runtime JavaScript Node.js. NPM dibuat pada tahun 2009 sebagai proyek open source untuk membantu pengembang JavaScript berbagi paket modul kode dengan mudah. NPM terdiri dari dua bagian utama: di sisi kita sebagai klien menggunakan command line interface (CLI) untuk menginstall dan menerbitkan paket, dan repositori online atau disebut npm registry yang menghosting paket-paket kode open source Javascript seperti Node.JS, aplikasi web front-end, aplikasi mobile, robot, router, dan kebutuhan lain yang tak terhitung jumlahnya dari komunitas JavaScript. Banyak paket kode yang diterbitkan di NPM dengan berbagai macam fungsinya bisa mempercepat proses pengembangan web kita.</p>\n<h2 id=\"npm-init\"><a href=\"#npm-init\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>npm init</h2>\n<p>Semua dimulai dari file package.json. Setiap project JavaScript - baik itu Node.js atau aplikasi browser - dapat dicakup sebagai paket npm dengan informasi paketnya sendiri. Tugas package.json adalah mendeskripsikan proyek tersebut. Itu seperti daftar komposisi pada bungkus makanan. package.json dibuat ketika <code class=\"language-text\">npm init</code> dijalankan untuk menginisialisasi proyek JavaScript / Node.js. Di dalamnya terdapat informasi, diantaranya metadata dasar yang disediakan oleh pengembang:</p>\n<ul>\n<li>name: nama library / proyek JavaScript Anda</li>\n<li>version: versi proyek Anda. Bagian ini bisa berguna sebagai sumber versi deploy.</li>\n<li>description: deskripsi proyek</li>\n<li>lisensi: lisensi proyek</li>\n</ul>\n<h2 id=\"npm-script\"><a href=\"#npm-script\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>npm script</h2>\n<p>package.json juga mendukung properti scripts yang dapat didefinisikan untuk menjalankan command line yang diinstal dalam konteks lokal sebuah proyek. Misalnya, bagian skrip dari proyek npm dapat terlihat seperti ini:</p>\n<pre class=\"language-text\"><code class=\"language-text\">    {\n      &quot;scripts&quot;: {\n        &quot;build&quot;: &quot;tsc&quot;,\n        &quot;format&quot;: &quot;prettier --write ** / *. ts&quot;,\n        &quot;format-check&quot;: &quot;prettier --check ** / *. ts&quot;,\n        &quot;lint&quot;: &quot;eslint src / ** / *. ts&quot;,\n        &quot;pack&quot;: &quot;ncc build&quot;,\n        &quot;test&quot;: &quot;jest&quot;,\n        &quot;all&quot;: &quot;npm run build &amp;&amp; npm run format &amp;&amp; npm run lint &amp;&amp; npm run pack &amp;&amp; npm test&quot;\n      }\n    }</code></pre>\n<p>Skrip di atas memberitahu paket apa saja yang dijalankan dengan skrip perintah yang tertulis. Eslint, prettier, ncc, jest tidak harus diinstal sebagai executable global melainkan hanya lokal untuk proyek Anda di dalam folder node_modules / .bin /.</p>\n<h2 id=\"dependencies-vs-devdependecies\"><a href=\"#dependencies-vs-devdependecies\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>dependencies vs devDependecies</h2>\n<p>Bagian ini ditulis dalam bentuk key value object dengan nama library npm sebagai key dan versi library yang ditulis dengan format semantik sebagai value. Ini adalah contoh dari templatenya:</p>\n<pre class=\"language-text\"><code class=\"language-text\">    {\n      &quot;dependencies&quot;: {\n        &quot;@ actions / core&quot;: &quot;^ 1.2.3&quot;,\n        &quot;@ actions / github&quot;: &quot;^ 2.1.1&quot;\n      },\n      &quot;devDependencies&quot;: {\n        &quot;@ types / jest&quot;: &quot;^ 25.1.4&quot;,\n        &quot;@ types / node&quot;: &quot;^ 13.9.0&quot;,\n        &quot;@ typescript-eslint / parser&quot;: &quot;^ 2.22.0&quot;,\n        &quot;@ zeit / ncc&quot;: &quot;^ 0.21.1&quot;,\n        &quot;eslint&quot;: &quot;^ 6.8.0&quot;,\n        &quot;eslint-plugin-github&quot;: &quot;^ 3.4.1&quot;,\n        &quot;eslint-plugin-jest&quot;: &quot;^ 23.8.2&quot;,\n        &quot;jest&quot;: &quot;^ 25.1.0&quot;,\n        &quot;jest-circus&quot;: &quot;^ 25.1.0&quot;,\n        &quot;js-yaml&quot;: &quot;^ 3.13.1&quot;,\n        &quot;prettier&quot;: &quot;^ 1.19.1&quot;,\n        &quot;ts-jest&quot;: &quot;^ 25.2.1&quot;,\n        &quot;typescript&quot;: &quot;^ 3.8.3&quot;\n      }\n    }</code></pre>\n<p>Dependensi ini nantinya akan diinstal ketika menjalankan perintah <code class=\"language-text\">npm install</code> dengan flag <code class=\"language-text\">--save</code> dan <code class=\"language-text\">--save-dev</code>. Flag tersebut dimaksudkan untuk memberi tahu dependensi akan digunakan masing-masing untuk lingkungan produksi dan pengembangan / pengujian. Kami akan menggali lebih dalam tentang pemasangan paket-paket ini di bagian selanjutnya. Selain itu penting untuk memahami kemungkinan tanda yang muncul sebelum versi semantik (baca selengkapnya tentang semantic versioning):</p>\n<ul>\n<li>^: rilis minor terbaru. Misalnya, spesifikasi ^ 1.0.4 mungkin menginstal versi 1.3.0 jika itu adalah versi minor terbaru dalam 1 seri utama.</li>\n<li>~: rilis patch terbaru. Dengan cara yang sama seperti ^ untuk rilis minor, spesifikasi ~ 1.0.4 mungkin menginstal versi 1.0.7 jika itu adalah versi minor terbaru dalam seri 1.0 minor.\nSemua versi paket yang tepat ini akan didokumentasikan dalam file package-lock.json yang dihasilkan.</li>\n</ul>\n<h2 id=\"package-lockjson\"><a href=\"#package-lockjson\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>package-lock.json</h2>\n<p>File ini menjelaskan versi pasti dari dependensi yang digunakan dalam proyek JavaScript npm. Jika dianalogikan seperti makanan package.json adalah label bahan dengan deskripsi secara umum, di dalam package-lock.json semua terlihat lebih detil. Dan sebagaimana makanan kita biasanya hanya membaca secara umum komposisinya, tidak perlu membaca kapan bawang dalam sebuah makanan dipanen dsb. package-lock.json tidak dimaksudkan untuk dibaca baris demi baris oleh pengembang. package-lock.json biasanya dibuat oleh perintah npm install, dan juga dibaca oleh alat NPM CLI kita untuk memastikan reproduksi lingkungan build untuk proyek dengan perintah <code class=\"language-text\">npm ci</code>.</p>\n<p>Sumber: <a href=\"https://www.freecodecamp.org/news/what-is-npm-a-node-package-manager-tutorial-for-beginners/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">freecodecamp.org</a></p>\n"}},{"node":{"title":"Cara Menggunakan NPM","path":"/cara-menggunakan-npm/","date":"17. February 2021","timeToRead":2,"description":"NPM (*Node Package Manager*) adalah pengelola paket default untuk runtime JavaScript Node.js. NPM terdiri dari dua bagian utama: CLI (command line interface) untuk menerbitkan (*publish*) atau mengunduh paket, dan repositori online yang menghosting paket-paket JavaScript","content":"<p>NPM (<em>Node Package Manager</em>) adalah pengelola paket default untuk runtime JavaScript Node.js. NPM terdiri dari dua bagian utama: CLI (command line interface) untuk menerbitkan (<em>publish</em>) atau mengunduh paket, dan repositori online yang menghosting paket-paket JavaScript. Konsepnya secara sederhana mirip dengan apps market, hanya saja ini disediakan untuk pengembang perangkat lunak.</p>\n<h2 id=\"menggunakan-npm\"><a href=\"#menggunakan-npm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Menggunakan npm</h2>\n<p>Di sisi pengguna, kita bisa menginstall paket-paket yang tersedia di NPM dengan menjalankan perintah di CLI. Jadi ada baiknya mengetahui cara menggunakan alat yang powerfull ini.</p>\n<p><strong>npm install</strong> - adalah perintah yang paling umum digunakan saat mengembangkan aplikasi JavaScript / Node.js saat ini. Secara default, npm install <package-name> akan menginstal versi terbaru dari sebuah paket dengan tanda versi ^. Instalasi npm dalam konteks sebuah project adalah mengunduh paket ke folder node_modules di dalam direktori project sesuai dengan spesifikasi package.json, mengupdate versi paket (dan pada gilirannya meregenerasi package-lock.json) di mana pun itu berdasarkan pada ^ dan ~ pencocokan versi. Kita dapat menambahkan flag global (-g) jika ingin menginstal paket dalam konteks global yang dapat digunakan di direktori manapun dalam komputer (umumnya pada paket peralatan command line seperti live server misalnya). npm telah membuat penginstalan paket JavaScript begitu mudah sehingga perintah ini sering digunakan secara tidak benar. Akibatnya npm menjadi banyak lelucon programmer karena menghasilkan folder node_module dengan ukuran sangat besar.</p>\n<p>Di sinilah --production flag berperan. Di bagian sebelumnya, kita membahas dependensi dan devDependency yang dimaksudkan untuk penggunaan masing-masing dalam lingkungan produksi dan pengembangan / pengujian. Dengan melampirkan --production flag ke perintah npm install, kita hanya akan menginstal paket dari dependensi, sehingga secara drastis mengurangi ukuran node_modules. Kita hanya menginstal apa yang benar-benar diperlukan agar aplikasi dapat aktif dan berjalan.</p>\n<p><strong>npm ci</strong> - jika npm install --production optimal untuk lingkungan produksi, haruskah ada perintah yang optimal untuk pengaturan pengembangan lokal dan pengujian? Gunakan npm ci. Sama seperti bagaimana jika package-lock.json belum ada dalam proyek yang dihasilkan setiap kali npm install dipanggil, npm ci menggunakan file ini untuk mengunduh versi yang tepat dari setiap paket yang bergantung pada proyek. Ini adalah cara kami memastikan bahwa konteks proyek kami tetap sama persis di berbagai mesin, baik laptop kami yang digunakan untuk pengembangan atau lingkungan build CI (Continuous Integration) seperti Github Actions.</p>\n<p><strong>npm audit</strong> - Dengan banyaknya paket yang telah diterbitkan dan dapat dengan mudah diinstal, paket npm rentan terhadap penulis yang buruk dengan niat jahat seperti ini.Menyadari adanya masalah pada ekosistem tersebut, organisasi npm.js memunculkan ide tentang audit npm. Mereka memelihara daftar celah keamanan yang dapat diaudit oleh pengembang terhadap ketergantungan mereka menggunakan perintah audit npm. npm audit memberikan informasi kepada pengembang tentang kerentanan dan apakah ada versi dengan perbaikan untuk ditingkatkan. Sebagai contoh,</p>\n<p>Jika remediasi tersedia di upgrade versi non-breaking berikutnya, npm audit fix dapat digunakan untuk mengupgrade versi dependensi yang terpengaruh secara otomatis.</p>\n<p>Sumber: <a href=\"https://www.freecodecamp.org/news/what-is-npm-a-node-package-manager-tutorial-for-beginners/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">freecodecamp.org</a></p>\n"}},{"node":{"title":"JAMStack Adalah","path":"/jam-stack-adalah/","date":"16. February 2021","timeToRead":3,"description":"JAMstack adalah arsitektur software yang disusun dari 3 komponen: Javascript, API, dan Markup. Arsitektur JAMStack dirancang untuk membuat website lebih cepat, lebih aman, dan lebih mudah untuk diskalakan.","content":"<p>JAMstack adalah arsitektur software yang disusun dari 3 komponen: Javascript, API, dan Markup. Arsitektur JAMStack dirancang untuk membuat website lebih cepat, lebih aman, dan lebih mudah untuk diskalakan. Prinsip inti JAMStack adalah <em>pre-rendering</em> dan <em>decoupling</em>.</p>\n<p><strong><em>Pre-rendering</em></strong> berarti halaman website (markup) yang mewakili view adalah file statis yang telah dibuild (berupa file html). Web server tidak perlu melakukan render setiap kali user melakukan request. Dengan Jamstack, front-end dibangun terlebih dahulu menjadi halaman statis beserta aset yang sudah sangat dioptimalkan selama proses build. Proses <em>pre-rendering</em> ini menghasilkan website yang dapat disajikan langsung dari CDN. Dengan begitu akan mengurangi biaya, kompleksitas, dan risiko server dinamis sebagai infrastruktur penting.</p>\n<p><strong><em>Decoupling</em></strong> berarti memisahkan antara sistem dengan service. Masing-masing komponen berdiri sendiri dan berkomunikasi menggunakan API. Pada praktik kebanyakan, halaman website dirender di sisi server setiap kali user melakukan request. Ini yang disebut dengan website dinamis, misalnya tampilan sebuah website (view) dirender dengan PHP atau bahasa pemrograman lainnya. Dengan metode itu kebutuhan server akan meningkat seiring dengan penambahan pengguna. Ini membuat sitem semakin besar dan kompleks.</p>\n<p>Istilah \"JAMStack\" muncul saat Matt Biilmann dan Chris Bach membuat alur kerja pengembangan web modern di Netlify, mereka mencari istilah mudah untuk merujuk pada sebuah pendekatan arsitektural itu untuk digunakan dalam percakapan. Jamstack mencakup banyak dasar-dasar arsitektur web yang ada, sehingga mereka menciptakan istilah Jamstack untuk membantu orang-orang membicarakannya dengan lebih ringkas.</p>\n<p>Dengan begitu banyak tool populer untuk membuat website statis, seperti Gatsby, Hugo, Jekyll, Eleventy, NextJS, dan masih banyak lagi, banyak pengembang web sudah terbiasa dengan alat yang dibutuhkan untuk mengembangkan Jamstack.</p>\n<h2 id=\"mengapa-menggunakan-jamstack\"><a href=\"#mengapa-menggunakan-jamstack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mengapa menggunakan JAMStack</h2>\n<p>Arsitektur JAMStack dapat memberi beberapa kelebihan pada website dan alur kerja pengembangan. Berikut beberapa kelebihannya</p>\n<h4 id=\"keamanan\"><a href=\"#keamanan\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keamanan</h4>\n<p>Jamstack menghilangkan penggunaan bagian dinamis dalam infrastruktur hosting sehingga menghasilkan lebih sedikit penggunaan server dan sistem menjadi lebih sulit untuk diserang.Tampilan halaman web dan aset adalah file yang dibuat secara pre-render, ini memungkinkan hanya memberikan akses baca saja (read-only) ke hosting. Hal itu mengurangi risiko serangan lebih jauh. Sementara layanan yang sifatnya dinamis dapat disediakan oleh vendor dengan tim yang dedicated atau pihak ketiga yang sudah memiliki keamanan sistem.</p>\n<h4 id=\"skala\"><a href=\"#skala\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Skala</h4>\n<p>Arsitektur yang populer saat ini menangani beban lalu lintas yang padat dengan menambahkan logika untuk membuat cache pada tampilan dan sumber daya yang sering diakses. Jamstack secara natural menyediakan ini. Karena halaman web dapat disajikan sepenuhnya dari CDN, tidak ada logika atau alur kerja yang rumit untuk menentukan aset apa yang dapat di-cache dan kapan. Bahkan dengan website Jamstack semuanya dapat disimpan dalam cache di CDN. Dengan begitu penerapannya bisa lebih sederhana dan kapasitas loadnya bisa lebih besar.</p>\n<h4 id=\"performa\"><a href=\"#performa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Performa</h4>\n<p>Kita semua tau kecepatan memuat (<em>load</em>) halaman berdampak pada pengalaman pengguna dan konversi. Website Jamstack menghilangkan kebutuhan untuk menghasilkan tampilan halaman di server setiap kali ada request, karena halaman telah dibuat sebelumnya (<em>pre-rendered</em>). Dengan semua halaman telah tersedia di CDN yang dekat dengan pengguna dan siap untuk ditayangkan, kinerja yang sangat tinggi dimungkinkan tanpa menggunakan infrastruktur yang mahal atau kompleks.</p>\n<h4 id=\"pemeliharaan\"><a href=\"#pemeliharaan\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pemeliharaan</h4>\n<p>Ketika kompleksitas hosting berkurang, berkurang pula tugas pemeliharaan. Situs yang dibuat sebelumnya (<em>pre-rendered</em>), disajikan langsung dari host sederhana atau langsung dari CDN sehingga tidak memerlukan tim ahli untuk memastikannya tetap bisa diakses. Pekerjaan yang berhubungan dengan tampilan halaman sudah selesai selama pembuatan, jadi website yang dihasilkan sudah stabil dan dapat dihosting tanpa server yang mungkin memerlukan patching, update, dan maintenance.</p>\n<h4 id=\"portabilitas\"><a href=\"#portabilitas\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Portabilitas</h4>\n<p>Situs Jamstack bersifat <em>pre-rendered</em> atau sudah dibuat sebelumnya. Itu berarti kita dapat menghostingnya dari berbagai layanan hosting dan memiliki kemampuan lebih besar untuk memindahkannya ke host pilihan Anda. Kita tidak perlu memindahkan banyak sekali file, cukup source file halaman web saja. Solusi hosting statis sederhana apa pun harus dapat melayani situs Jamstack. Kita tidak lagi terkunci pada satu infrastruktur.</p>\n<h4 id=\"pengalaman-pengembang\"><a href=\"#pengalaman-pengembang\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pengalaman Pengembang</h4>\n<p>Jamstack adalah sebuah arsitektur, bukan alat yang spesifik. Website Jamstack dapat dibangun dengan berbagai alat. Itu tidak bergantung pada teknologi eksklusif atau framework yang eksotis dan sedikit diketahui. Sebaliknya, mereka mengembangkan alat dan konvensi yang tersedia secara luas.</p>\n<p>Sumber: <a href=\"https://jamstack.org/what-is-jamstack/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jamstack.org</a></p>\n"}}]}}},"context":{}}